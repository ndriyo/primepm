generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id               String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String               @db.VarChar(255)
  description      String?
  createdAt        DateTime?            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime?            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdById      String?              @map("created_by") @db.Uuid
  updatedById      String?              @map("updated_by") @db.Uuid
  criteriaVersions CriteriaVersion[]
  departments      Department[]
  createdBy        User?                @relation("OrganizationCreatedBy", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_organizations_created_by")
  updatedBy        User?                @relation("OrganizationUpdatedBy", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_organizations_updated_by")
  portfolios       PortfolioSelection[]
  projects         Project[]
  users            User[]

  @@map("organizations")
}

model Department {
  id             String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  organizationId String       @map("organization_id") @db.Uuid
  name           String       @db.VarChar(255)
  description    String?
  createdAt      DateTime?    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime?    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdById    String?      @map("created_by") @db.Uuid
  updatedById    String?      @map("updated_by") @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdBy      User?        @relation("DepartmentCreatedBy", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_departments_created_by")
  updatedBy      User?        @relation("DepartmentUpdatedBy", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_departments_updated_by")
  projects       Project[]
  users          User[]

  @@map("departments")
}

model User {
  id                      String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email                   String                 @unique @db.VarChar(255)
  fullName                String                 @map("full_name") @db.VarChar(255)
  organizationId          String                 @map("organization_id") @db.Uuid
  departmentId            String?                @map("department_id") @db.Uuid
  roles                   String[]
  createdAt               DateTime?              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime?              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdById             String?                @map("created_by") @db.Uuid
  updatedById             String?                @map("updated_by") @db.Uuid
  auditLogs               AuditLog[]
  createdCommitteeScores  CommitteeScore[]       @relation("CommitteeScoreCreatedBy")
  updatedCommitteeScores  CommitteeScore[]       @relation("CommitteeScoreUpdatedBy")
  committeeScores         CommitteeScore[]       @relation("CommitteeScoresByUser")
  createdCriteria         Criterion[]            @relation("CriterionCreatedBy")
  updatedCriteria         Criterion[]            @relation("CriterionUpdatedBy")
  createdCriteriaVersions CriteriaVersion[]      @relation("CriteriaVersionCreatedBy")
  updatedCriteriaVersions CriteriaVersion[]      @relation("CriteriaVersionUpdatedBy")
  createdDepartments      Department[]           @relation("DepartmentCreatedBy")
  updatedDepartments      Department[]           @relation("DepartmentUpdatedBy")
  createdOrganizations    Organization[]         @relation("OrganizationCreatedBy")
  updatedOrganizations    Organization[]         @relation("OrganizationUpdatedBy")
  createdPortfolios       PortfolioSelection[]   @relation("PortfolioCreatedBy")
  updatedPortfolios       PortfolioSelection[]   @relation("PortfolioUpdatedBy")
  createdScores           ProjectCriteriaScore[] @relation("ProjectScoreCreatedBy")
  updatedScores           ProjectCriteriaScore[] @relation("ProjectScoreUpdatedBy")
  createdProjects         Project[]              @relation("ProjectCreatedBy")
  updatedProjects         Project[]              @relation("ProjectUpdatedBy")
  createdBy               User?                  @relation("UserCreatedBy", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_created_by")
  createdUsers            User[]                 @relation("UserCreatedBy")
  updatedBy               User?                  @relation("UserUpdatedBy", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_updated_by")
  updatedUsers            User[]                 @relation("UserUpdatedBy")
  department              Department?            @relation(fields: [departmentId], references: [id], onUpdate: NoAction)
  organization            Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("users")
}

model CriteriaVersion {
  id                  String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  organizationId      String                 @map("organization_id") @db.Uuid
  name                String                 @db.VarChar(255)
  description         String?
  isActive            Boolean?               @default(false) @map("is_active")
  createdAt           DateTime?              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime?              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdById         String?                @map("created_by") @db.Uuid
  updatedById         String?                @map("updated_by") @db.Uuid
  criteria            Criterion[]
  createdBy           User?                  @relation("CriteriaVersionCreatedBy", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization        Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedBy           User?                  @relation("CriteriaVersionUpdatedBy", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pairwiseComparisons PairwiseComparison[]
  projectScores       ProjectCriteriaScore[]

  @@map("criteria_versions")
}

model Criterion {
  id                    String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  versionId             String                 @map("version_id") @db.Uuid
  key                   String                 @db.VarChar(50)
  label                 String                 @db.VarChar(255)
  description           String?
  isInverse             Boolean?               @default(false) @map("is_inverse")
  isDefault             Boolean?               @default(false) @map("is_default")
  weight                Float?
  scale                 Json?
  rubric                Json?
  createdAt             DateTime?              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime?              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdById           String?                @map("created_by") @db.Uuid
  updatedById           String?                @map("updated_by") @db.Uuid
  committeeScores       CommitteeScore[]
  createdBy             User?                  @relation("CriterionCreatedBy", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedBy             User?                  @relation("CriterionUpdatedBy", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  version               CriteriaVersion        @relation(fields: [versionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  comparisonsCriterionA PairwiseComparison[]   @relation("CriterionA")
  comparisonsCriterionB PairwiseComparison[]   @relation("CriterionB")
  projectScores         ProjectCriteriaScore[]

  @@map("criteria")
}

model PairwiseComparison {
  id           String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  versionId    String          @map("version_id") @db.Uuid
  criterionAId String          @map("criterion_a_id") @db.Uuid
  criterionBId String          @map("criterion_b_id") @db.Uuid
  value        Float
  createdAt    DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  criterionA   Criterion       @relation("CriterionA", fields: [criterionAId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  criterionB   Criterion       @relation("CriterionB", fields: [criterionBId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  version      CriteriaVersion @relation(fields: [versionId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("pairwise_comparisons")
}

model Project {
  id                String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  organizationId    String                 @map("organization_id") @db.Uuid
  departmentId      String?                @map("department_id") @db.Uuid
  name              String                 @db.VarChar(255)
  description       String?
  status            String                 @db.VarChar(50)
  startDate         DateTime               @map("start_date") @db.Date
  endDate           DateTime               @map("end_date") @db.Date
  budget            Float?
  resources         Int
  tags              String[]
  createdAt         DateTime?              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdById       String                 @map("created_by") @db.Uuid
  updatedById       String?                @map("updated_by") @db.Uuid
  committeeScores   CommitteeScore[]
  portfolioProjects PortfolioProject[]
  projectScores     ProjectCriteriaScore[]
  createdBy         User                   @relation("ProjectCreatedBy", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  department        Department?            @relation(fields: [departmentId], references: [id], onUpdate: NoAction)
  organization      Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedBy         User?                  @relation("ProjectUpdatedBy", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("projects")
}

model ProjectCriteriaScore {
  id          String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  projectId   String          @map("project_id") @db.Uuid
  criterionId String          @map("criterion_id") @db.Uuid
  versionId   String          @map("version_id") @db.Uuid
  score       Float
  comment     String?
  createdAt   DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdById String          @map("created_by") @db.Uuid
  updatedById String?         @map("updated_by") @db.Uuid
  createdBy   User            @relation("ProjectScoreCreatedBy", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  criterion   Criterion       @relation(fields: [criterionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  project     Project         @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedBy   User?           @relation("ProjectScoreUpdatedBy", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  version     CriteriaVersion @relation(fields: [versionId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("project_criteria_scores")
}

model CommitteeScore {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  projectId   String    @map("project_id") @db.Uuid
  criterionId String    @map("criterion_id") @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  score       Float
  comment     String?
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdById String    @map("created_by") @db.Uuid
  updatedById String?   @map("updated_by") @db.Uuid
  createdBy   User      @relation("CommitteeScoreCreatedBy", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  criterion   Criterion @relation(fields: [criterionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedBy   User?     @relation("CommitteeScoreUpdatedBy", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        User      @relation("CommitteeScoresByUser", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("committee_scores")
}

model PortfolioSelection {
  id                String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  organizationId    String             @map("organization_id") @db.Uuid
  name              String             @db.VarChar(255)
  description       String?
  version           String             @db.VarChar(50)
  status            String             @db.VarChar(50)
  selectionDate     DateTime           @map("selection_date") @db.Date
  constraints       Json?
  isActive          Boolean?           @default(false) @map("is_active")
  createdAt         DateTime?          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdById       String             @map("created_by") @db.Uuid
  updatedById       String?            @map("updated_by") @db.Uuid
  portfolioProjects PortfolioProject[]
  createdBy         User               @relation("PortfolioCreatedBy", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization      Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedBy         User?              @relation("PortfolioUpdatedBy", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("portfolio_selections")
}

model PortfolioProject {
  id          String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  portfolioId String             @map("portfolio_id") @db.Uuid
  projectId   String             @map("project_id") @db.Uuid
  isSelected  Boolean?           @default(false) @map("is_selected")
  score       Float
  createdAt   DateTime?          @default(now()) @map("created_at") @db.Timestamptz(6)
  portfolio   PortfolioSelection @relation(fields: [portfolioId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  project     Project            @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("portfolio_projects")
}

model AuditLog {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId     String    @map("user_id") @db.Uuid
  action     String    @db.VarChar(50)
  entityType String    @map("entity_type") @db.VarChar(50)
  entityId   String    @map("entity_id") @db.Uuid
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  user       User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("audit_logs")
}
