// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Organization model - represents a company/organization in multi-tenant setup
model Organization {
  id            String         @id @default(uuid())
  name          String
  description   String?
  
  // Relations
  departments   Department[]
  users         User[]
  projects      Project[]
  portfolios    PortfolioSelection[]
  criteriaVersions CriteriaVersion[]

  // Audit fields
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  createdBy     User?          @relation("OrganizationCreatedBy", fields: [createdById], references: [id])
  createdById   String?        @map("created_by")
  updatedBy     User?          @relation("OrganizationUpdatedBy", fields: [updatedById], references: [id])
  updatedById   String?        @map("updated_by")

  @@map("organizations")
}

// Department model - represents departments within an organization
model Department {
  id            String         @id @default(uuid())
  name          String
  description   String?
  
  // Relations
  organization  Organization   @relation(fields: [organizationId], references: [id])
  organizationId String        @map("organization_id")
  users         User[]
  projects      Project[]

  // Audit fields
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  createdBy     User?          @relation("DepartmentCreatedBy", fields: [createdById], references: [id])
  createdById   String?        @map("created_by")
  updatedBy     User?          @relation("DepartmentUpdatedBy", fields: [updatedById], references: [id])
  updatedById   String?        @map("updated_by")

  @@map("departments")
}

// User model - represents users with different roles
model User {
  id            String         @id @default(uuid())
  email         String         @unique
  fullName      String         @map("full_name")
  roles         String[]       // e.g., ["PMO", "Management", "Committee", "Project Manager"]
  
  // Relations
  organization  Organization   @relation(fields: [organizationId], references: [id])
  organizationId String        @map("organization_id")
  department    Department?    @relation(fields: [departmentId], references: [id])
  departmentId  String?        @map("department_id")
  
  // Projects created by this user
  createdProjects Project[]    @relation("ProjectCreatedBy")
  updatedProjects Project[]    @relation("ProjectUpdatedBy")
  
  // Portfolios created/updated by this user
  createdPortfolios PortfolioSelection[] @relation("PortfolioCreatedBy")
  updatedPortfolios PortfolioSelection[] @relation("PortfolioUpdatedBy")
  
  // Criteria versions created/updated by this user
  createdCriteriaVersions CriteriaVersion[] @relation("CriteriaVersionCreatedBy")
  updatedCriteriaVersions CriteriaVersion[] @relation("CriteriaVersionUpdatedBy")
  
  // Criteria created/updated by this user
  createdCriteria Criterion[] @relation("CriterionCreatedBy")
  updatedCriteria Criterion[] @relation("CriterionUpdatedBy")
  
  // Self-assessment criteria scores created/updated by this user
  createdScores ProjectCriteriaScore[] @relation("ProjectScoreCreatedBy")
  updatedScores ProjectCriteriaScore[] @relation("ProjectScoreUpdatedBy")
  
  // Committee scores provided by this user
  committeeScores CommitteeScore[] @relation("CommitteeScoresByUser")
  createdCommitteeScores CommitteeScore[] @relation("CommitteeScoreCreatedBy")
  updatedCommitteeScores CommitteeScore[] @relation("CommitteeScoreUpdatedBy")
  
  // Organizations created/updated by this user
  createdOrganizations Organization[] @relation("OrganizationCreatedBy")
  updatedOrganizations Organization[] @relation("OrganizationUpdatedBy")
  
  // Departments created/updated by this user
  createdDepartments Department[] @relation("DepartmentCreatedBy")
  updatedDepartments Department[] @relation("DepartmentUpdatedBy")
  
  // Audit logs generated by this user
  auditLogs      AuditLog[]
  
  // Self-referential for created/updated by
  createdUsers   User[]    @relation("UserCreatedBy")
  createdBy      User?     @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdById    String?   @map("created_by")
  updatedUsers   User[]    @relation("UserUpdatedBy")
  updatedBy      User?     @relation("UserUpdatedBy", fields: [updatedById], references: [id])
  updatedById    String?   @map("updated_by")

  // Audit fields
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

// CriteriaVersion model - groups criteria used in a specific time period
model CriteriaVersion {
  id            String         @id @default(uuid())
  name          String
  description   String?
  isActive      Boolean        @default(false) @map("is_active")
  
  // Relations
  organization  Organization   @relation(fields: [organizationId], references: [id])
  organizationId String        @map("organization_id")
  criteria      Criterion[]
  pairwiseComparisons PairwiseComparison[]
  projectScores ProjectCriteriaScore[]

  // Audit fields
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  createdBy     User?          @relation("CriteriaVersionCreatedBy", fields: [createdById], references: [id])
  createdById   String?        @map("created_by")
  updatedBy     User?          @relation("CriteriaVersionUpdatedBy", fields: [updatedById], references: [id])
  updatedById   String?        @map("updated_by")

  @@map("criteria_versions")
}

// Criterion model - individual criteria for project evaluation
model Criterion {
  id            String         @id @default(uuid())
  key           String         // Unique identifier like "revenue", "budget"
  label         String         // Display name
  description   String?
  isInverse     Boolean        @default(false) @map("is_inverse") // True if higher values are worse
  isDefault     Boolean        @default(false) @map("is_default")
  weight        Float?         // Weight calculated from AHP
  scale         Json?          // e.g., { "min": 1, "max": 10 }
  rubric        Json?          // e.g., { "1": "Very low impact", "10": "Very high impact" }
  
  // Relations
  version       CriteriaVersion @relation(fields: [versionId], references: [id])
  versionId     String         @map("version_id")
  projectScores ProjectCriteriaScore[]
  committeeScores CommitteeScore[]
  
  // Pairwise comparison relations
  comparisonsCriterionA PairwiseComparison[] @relation("CriterionA")
  comparisonsCriterionB PairwiseComparison[] @relation("CriterionB")

  // Audit fields
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  createdBy     User?          @relation("CriterionCreatedBy", fields: [createdById], references: [id])
  createdById   String?        @map("created_by")
  updatedBy     User?          @relation("CriterionUpdatedBy", fields: [updatedById], references: [id])
  updatedById   String?        @map("updated_by")

  @@map("criteria")
}

// PairwiseComparison model - stores AHP comparisons between criteria
model PairwiseComparison {
  id            String         @id @default(uuid())
  value         Float          // Comparison value (e.g., 1/3, 1, 3)
  
  // Relations
  version       CriteriaVersion @relation(fields: [versionId], references: [id])
  versionId     String         @map("version_id")
  
  criterionA    Criterion      @relation("CriterionA", fields: [criterionAId], references: [id])
  criterionAId  String         @map("criterion_a_id")
  
  criterionB    Criterion      @relation("CriterionB", fields: [criterionBId], references: [id])
  criterionBId  String         @map("criterion_b_id")

  // Audit fields
  createdAt     DateTime       @default(now()) @map("created_at")

  @@map("pairwise_comparisons")
}

// Project model - represents a project proposal
model Project {
  id            String         @id @default(uuid())
  name          String
  description   String?
  status        String         // e.g., "planning", "in-progress", "completed", "on-hold"
  startDate     DateTime       @map("start_date")
  endDate       DateTime       @map("end_date")
  budget        Float?
  resources     Int            // Number of mandays
  tags          String[]
  
  // Relations
  organization  Organization   @relation(fields: [organizationId], references: [id])
  organizationId String        @map("organization_id")
  
  department    Department?    @relation(fields: [departmentId], references: [id])
  departmentId  String?        @map("department_id")
  
  projectScores ProjectCriteriaScore[]
  committeeScores CommitteeScore[]
  portfolioProjects PortfolioProject[]

  // Audit fields
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  createdBy     User           @relation("ProjectCreatedBy", fields: [createdById], references: [id])
  createdById   String         @map("created_by")
  updatedBy     User?          @relation("ProjectUpdatedBy", fields: [updatedById], references: [id])
  updatedById   String?        @map("updated_by")

  @@map("projects")
}

// ProjectCriteriaScore model - self-assessment scores for project criteria
model ProjectCriteriaScore {
  id            String         @id @default(uuid())
  score         Float
  comment       String?
  
  // Relations
  project       Project        @relation(fields: [projectId], references: [id])
  projectId     String         @map("project_id")
  
  criterion     Criterion      @relation(fields: [criterionId], references: [id])
  criterionId   String         @map("criterion_id")
  
  version       CriteriaVersion @relation(fields: [versionId], references: [id])
  versionId     String         @map("version_id")

  // Audit fields
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  createdBy     User           @relation("ProjectScoreCreatedBy", fields: [createdById], references: [id])
  createdById   String         @map("created_by")
  updatedBy     User?          @relation("ProjectScoreUpdatedBy", fields: [updatedById], references: [id])
  updatedById   String?        @map("updated_by")

  @@map("project_criteria_scores")
}

// CommitteeScore model - scores provided by committee members
model CommitteeScore {
  id            String         @id @default(uuid())
  score         Float
  comment       String?
  
  // Relations
  project       Project        @relation(fields: [projectId], references: [id])
  projectId     String         @map("project_id")
  
  criterion     Criterion      @relation(fields: [criterionId], references: [id])
  criterionId   String         @map("criterion_id")
  
  user          User           @relation("CommitteeScoresByUser", fields: [userId], references: [id])
  userId        String         @map("user_id")

  // Audit fields
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  createdBy     User           @relation("CommitteeScoreCreatedBy", fields: [createdById], references: [id])
  createdById   String         @map("created_by")
  updatedBy     User?          @relation("CommitteeScoreUpdatedBy", fields: [updatedById], references: [id])
  updatedById   String?        @map("updated_by")

  @@map("committee_scores")
}

// PortfolioSelection model - represents a portfolio selection cycle
model PortfolioSelection {
  id            String         @id @default(uuid())
  name          String
  description   String?
  version       String         // Could be year or other identifier
  status        String         // "draft" or "final"
  selectionDate DateTime       @map("selection_date")
  constraints   Json?          // JSON object for budget constraints, resource constraints, etc.
  isActive      Boolean        @default(false) @map("is_active")
  
  // Relations
  organization  Organization   @relation(fields: [organizationId], references: [id])
  organizationId String        @map("organization_id")
  
  portfolioProjects PortfolioProject[]

  // Audit fields
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  createdBy     User           @relation("PortfolioCreatedBy", fields: [createdById], references: [id])
  createdById   String         @map("created_by")
  updatedBy     User?          @relation("PortfolioUpdatedBy", fields: [updatedById], references: [id])
  updatedById   String?        @map("updated_by")

  @@map("portfolio_selections")
}

// PortfolioProject model - junction table for portfolios and projects
model PortfolioProject {
  id            String         @id @default(uuid())
  isSelected    Boolean        @default(false) @map("is_selected")
  score         Float          // Overall project score in this portfolio
  
  // Relations
  portfolio     PortfolioSelection @relation(fields: [portfolioId], references: [id])
  portfolioId   String         @map("portfolio_id")
  
  project       Project        @relation(fields: [projectId], references: [id])
  projectId     String         @map("project_id")

  // Audit fields
  createdAt     DateTime       @default(now()) @map("created_at")

  @@map("portfolio_projects")
}

// AuditLog model - tracks user actions
model AuditLog {
  id            String         @id @default(uuid())
  action        String         // "CREATE", "UPDATE", "DELETE"
  entityType    String         @map("entity_type")
  entityId      String         @map("entity_id")
  
  // Relations
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @map("user_id")

  // Timestamp
  createdAt     DateTime       @default(now()) @map("created_at")

  @@map("audit_logs")
}
