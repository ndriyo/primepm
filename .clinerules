# Project Intelligence

## Implementation Patterns
- Components are organized in app/ directories
  - app/ contains Next.js specific components and pages
- Using 'use client' directive for client-side components
- Tailwind CSS utility classes with custom component classes (btn-primary, btn-secondary)

## File Structure Conventions
- Data models in /app/_repositories/
- API call in /app/api/ directories
- context in /app/_contexts/
- hooks in /app/_hooks/
- lib in /app/_lib/
- Page components in /app/[route]/page.tsx
- Feature-specific components in /app/[route]/_components/
- Shared components in /app/_components/ directory

## Naming Conventions
- PascalCase for component files and React components
- camelCase for variables, functions, and non-component files
- Descriptive names that reflect component purpose

## Code Style Preferences
- TypeScript interfaces for data models
- Functional components with hooks
- Export statements at the component declaration
